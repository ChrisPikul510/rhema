{"version":3,"sources":["webpack://rhema/webpack/universalModuleDefinition","webpack://rhema/webpack/bootstrap","webpack://rhema/./node_modules/sax/lib/sax.js","webpack://rhema/./src/basenode.js","webpack://rhema/./src/index.js","webpack://rhema/./src/node/base.js","webpack://rhema/./src/node/entry.js","webpack://rhema/./src/node/file.js","webpack://rhema/./src/node/files.js","webpack://rhema/./src/node/index.js","webpack://rhema/./src/node/language.js","webpack://rhema/./src/node/project.js","webpack://rhema/./src/node/source.js","webpack://rhema/./src/node/target.js","webpack://rhema/./src/parser.js","webpack://rhema/external \"stream\"","webpack://rhema/external \"string_decoder\""],"names":["Attributes","getValidAttribute","str","toLowerCase","attr","__nodeIds","Node","constructor","data","_id","name","attributes","applyFromSAX","getID","getTag","_tag","getParentID","_parent","getChildrenIDs","Array","_children","getContent","_content","getCustomAttributes","Object","apply","_customAttrs","getAllAttributes","validAttrs","prop","hasOwnProperty","startsWith","node","setAttribute","value","setParent","applyChild","nodeId","addChild","applyParent","exists","findIndex","i","push","removeChild","filter","setContent","val","Rhema","Map","parse","options","assign","Promise","resolve","reject","then","obj","loaded","isProject","project","target","languages","set","baseEl","getBaseElement","lang","source","baseLanguage","catch","Base","File","Entry","_source","_target","getSource","getTarget","Files","_files","_base","console","warn","Language","addNode","_nodes","Project","_nodeFiles","hasFiles","length","countFiles","getFiles","concat","Source","Target","NodeFromSAX","Nodes","custom","BaseNode","ParseRawAttribute","rawStr","attrs","split","rtn","map","parts","trim","substr","p","forEach","e","Parse","SAX","parser","normalize","lowercase","xmlns","position","onerror","onprocessinginstruction","body","log","rootDoc","lastTag","thisTag","treeDepth","onopentag","onclosetag","tag","pop","ontext","txt","onend","write","close"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;AAGA;AACA;;;;;;;;;;;;ACzEA,CAAC,iBAAiB;AAClB,uCAAuC;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC,OAAO;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC,OAAO;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,YAAY;AAClC;AACA,yBAAyB,mBAAmB,cAAc;AAC1D,wBAAwB,0BAA0B;AAClD,wBAAwB;AACxB;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnqCAAqC;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;;AAEA;AACA;AACA;AACA,mDAAmD,OAAO;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gDAAgD,oBAAoB;AACpE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB;AACtB;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA,WAAW,OAAO,sBAAsB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA,CAAC,oBAAgD;;;;;;;;;;;;;;;;;;;AC5hD1C,MAAMA,aAAa,CACtB,OADsB,EACb,MADa,EACL,SADK,EACM,MADN,EACc,MADd,EACsB,QADtB,EACgC,QADhC,CAAnB;AAIP;;;;;;;;AAKA,SAASC,iBAAT,CAA2BC,GAA3B,EAAgC;AAC5BA,QAAMA,IAAIC,WAAJ,EAAN;;AACA,OAAI,MAAMC,IAAV,IAAkBJ,UAAlB,EAA8B;AAC1B,QAAGI,KAAKD,WAAL,MAAsBD,GAAzB,EACI,OAAOE,IAAP;AACP;;AACD,SAAO,IAAP;AACH;;AAED,IAAIC,YAAY,CAAhB;;AACe,MAAMC,IAAN,CAAW;AAQtBC,cAAYC,IAAZ,EAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,aAPZ;AAOY;AAAA;AAAA;AAAA;AAAA;AAAA,aANX;AAMW;AAA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","file":"rhema.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"rhema\"] = factory();\n\telse\n\t\troot[\"rhema\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n",";(function (sax) { // wrapper for non-node envs\n  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\n  sax.SAXParser = SAXParser\n  sax.SAXStream = SAXStream\n  sax.createStream = createStream\n\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n  sax.MAX_BUFFER_LENGTH = 64 * 1024\n\n  var buffers = [\n    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',\n    'procInstName', 'procInstBody', 'entity', 'attribName',\n    'attribValue', 'cdata', 'script'\n  ]\n\n  sax.EVENTS = [\n    'text',\n    'processinginstruction',\n    'sgmldeclaration',\n    'doctype',\n    'comment',\n    'opentagstart',\n    'attribute',\n    'opentag',\n    'closetag',\n    'opencdata',\n    'cdata',\n    'closecdata',\n    'error',\n    'end',\n    'ready',\n    'script',\n    'opennamespace',\n    'closenamespace'\n  ]\n\n  function SAXParser (strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt)\n    }\n\n    var parser = this\n    clearBuffers(parser)\n    parser.q = parser.c = ''\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\n    parser.opt = opt || {}\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'\n    parser.tags = []\n    parser.closed = parser.closedRoot = parser.sawRoot = false\n    parser.tag = parser.error = null\n    parser.strict = !!strict\n    parser.noscript = !!(strict || parser.opt.noscript)\n    parser.state = S.BEGIN\n    parser.strictEntities = parser.opt.strictEntities\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)\n    parser.attribList = []\n\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS)\n    }\n\n    // mostly just for error reporting\n    parser.trackPosition = parser.opt.position !== false\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0\n    }\n    emit(parser, 'onready')\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F () {}\n      F.prototype = o\n      var newf = new F()\n      return newf\n    }\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = []\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\n      return a\n    }\n  }\n\n  function checkBufferLength (parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\n    var maxActual = 0\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser)\n            break\n\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata)\n            parser.cdata = ''\n            break\n\n          case 'script':\n            emitNode(parser, 'onscript', parser.script)\n            parser.script = ''\n            break\n\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i])\n        }\n      }\n      maxActual = Math.max(maxActual, len)\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    var m = sax.MAX_BUFFER_LENGTH - maxActual\n    parser.bufferCheckPosition = m + parser.position\n  }\n\n  function clearBuffers (parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = ''\n    }\n  }\n\n  function flushBuffers (parser) {\n    closeText(parser)\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata)\n      parser.cdata = ''\n    }\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n  }\n\n  SAXParser.prototype = {\n    end: function () { end(this) },\n    write: write,\n    resume: function () { this.error = null; return this },\n    close: function () { return this.write(null) },\n    flush: function () { flushBuffers(this) }\n  }\n\n  var Stream\n  try {\n    Stream = require('stream').Stream\n  } catch (ex) {\n    Stream = function () {}\n  }\n\n  var streamWraps = sax.EVENTS.filter(function (ev) {\n    return ev !== 'error' && ev !== 'end'\n  })\n\n  function createStream (strict, opt) {\n    return new SAXStream(strict, opt)\n  }\n\n  function SAXStream (strict, opt) {\n    if (!(this instanceof SAXStream)) {\n      return new SAXStream(strict, opt)\n    }\n\n    Stream.apply(this)\n\n    this._parser = new SAXParser(strict, opt)\n    this.writable = true\n    this.readable = true\n\n    var me = this\n\n    this._parser.onend = function () {\n      me.emit('end')\n    }\n\n    this._parser.onerror = function (er) {\n      me.emit('error', er)\n\n      // if didn't throw, then means error was handled.\n      // go ahead and clear error, so we can write again.\n      me._parser.error = null\n    }\n\n    this._decoder = null\n\n    streamWraps.forEach(function (ev) {\n      Object.defineProperty(me, 'on' + ev, {\n        get: function () {\n          return me._parser['on' + ev]\n        },\n        set: function (h) {\n          if (!h) {\n            me.removeAllListeners(ev)\n            me._parser['on' + ev] = h\n            return h\n          }\n          me.on(ev, h)\n        },\n        enumerable: true,\n        configurable: false\n      })\n    })\n  }\n\n  SAXStream.prototype = Object.create(Stream.prototype, {\n    constructor: {\n      value: SAXStream\n    }\n  })\n\n  SAXStream.prototype.write = function (data) {\n    if (typeof Buffer === 'function' &&\n      typeof Buffer.isBuffer === 'function' &&\n      Buffer.isBuffer(data)) {\n      if (!this._decoder) {\n        var SD = require('string_decoder').StringDecoder\n        this._decoder = new SD('utf8')\n      }\n      data = this._decoder.write(data)\n    }\n\n    this._parser.write(data.toString())\n    this.emit('data', data)\n    return true\n  }\n\n  SAXStream.prototype.end = function (chunk) {\n    if (chunk && chunk.length) {\n      this.write(chunk)\n    }\n    this._parser.end()\n    return true\n  }\n\n  SAXStream.prototype.on = function (ev, handler) {\n    var me = this\n    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {\n      me._parser['on' + ev] = function () {\n        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)\n        args.splice(0, 0, ev)\n        me.emit.apply(me, args)\n      }\n    }\n\n    return Stream.prototype.on.call(me, ev, handler)\n  }\n\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  var CDATA = '[CDATA['\n  var DOCTYPE = 'DOCTYPE'\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'\n  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\n\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  function isWhitespace (c) {\n    return c === ' ' || c === '\\n' || c === '\\r' || c === '\\t'\n  }\n\n  function isQuote (c) {\n    return c === '\"' || c === '\\''\n  }\n\n  function isAttribEnd (c) {\n    return c === '>' || isWhitespace(c)\n  }\n\n  function isMatch (regex, c) {\n    return regex.test(c)\n  }\n\n  function notMatch (regex, c) {\n    return !isMatch(regex, c)\n  }\n\n  var S = 0\n  sax.STATE = {\n    BEGIN: S++, // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++, // leading whitespace\n    TEXT: S++, // general stuff\n    TEXT_ENTITY: S++, // &amp and such.\n    OPEN_WAKA: S++, // <\n    SGML_DECL: S++, // <!BLARG\n    SGML_DECL_QUOTED: S++, // <!BLARG foo \"bar\n    DOCTYPE: S++, // <!DOCTYPE\n    DOCTYPE_QUOTED: S++, // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++, // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++, // <!-\n    COMMENT: S++, // <!--\n    COMMENT_ENDING: S++, // <!-- blah -\n    COMMENT_ENDED: S++, // <!-- blah --\n    CDATA: S++, // <![CDATA[ something\n    CDATA_ENDING: S++, // ]\n    CDATA_ENDING_2: S++, // ]]\n    PROC_INST: S++, // <?hi\n    PROC_INST_BODY: S++, // <?hi there\n    PROC_INST_ENDING: S++, // <?hi \"there\" ?\n    OPEN_TAG: S++, // <strong\n    OPEN_TAG_SLASH: S++, // <strong /\n    ATTRIB: S++, // <a\n    ATTRIB_NAME: S++, // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _\n    ATTRIB_VALUE: S++, // <a foo=\n    ATTRIB_VALUE_QUOTED: S++, // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++, // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot\n    CLOSE_TAG: S++, // </a\n    CLOSE_TAG_SAW_WHITE: S++, // </a   >\n    SCRIPT: S++, // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n  }\n\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  }\n\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  }\n\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key]\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\n    sax.ENTITIES[key] = s\n  })\n\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s\n  }\n\n  // shorthand\n  S = sax.STATE\n\n  function emit (parser, event, data) {\n    parser[event] && parser[event](data)\n  }\n\n  function emitNode (parser, nodeType, data) {\n    if (parser.textNode) closeText(parser)\n    emit(parser, nodeType, data)\n  }\n\n  function closeText (parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode)\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode)\n    parser.textNode = ''\n  }\n\n  function textopts (opt, text) {\n    if (opt.trim) text = text.trim()\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ')\n    return text\n  }\n\n  function error (parser, er) {\n    closeText(parser)\n    if (parser.trackPosition) {\n      er += '\\nLine: ' + parser.line +\n        '\\nColumn: ' + parser.column +\n        '\\nChar: ' + parser.c\n    }\n    er = new Error(er)\n    parser.error = er\n    emit(parser, 'onerror', er)\n    return parser\n  }\n\n  function end (parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')\n    if ((parser.state !== S.BEGIN) &&\n      (parser.state !== S.BEGIN_WHITESPACE) &&\n      (parser.state !== S.TEXT)) {\n      error(parser, 'Unexpected end')\n    }\n    closeText(parser)\n    parser.c = ''\n    parser.closed = true\n    emit(parser, 'onend')\n    SAXParser.call(parser, parser.strict, parser.opt)\n    return parser\n  }\n\n  function strictFail (parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail')\n    }\n    if (parser.strict) {\n      error(parser, message)\n    }\n  }\n\n  function newTag (parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    var tag = parser.tag = { name: parser.tagName, attributes: {} }\n\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns\n    }\n    parser.attribList.length = 0\n    emitNode(parser, 'onopentagstart', tag)\n  }\n\n  function qname (name, attribute) {\n    var i = name.indexOf(':')\n    var qualName = i < 0 ? [ '', name ] : name.split(':')\n    var prefix = qualName[0]\n    var local = qualName[1]\n\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns'\n      local = ''\n    }\n\n    return { prefix: prefix, local: local }\n  }\n\n  function attrib (parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]()\n    }\n\n    if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = ''\n      return\n    }\n\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true)\n      var prefix = qn.prefix\n      var local = qn.local\n\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser,\n            'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser,\n            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else {\n          var tag = parser.tag\n          var parent = parser.tags[parser.tags.length - 1] || parser\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns)\n          }\n          tag.ns[local] = parser.attribValue\n        }\n      }\n\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      parser.attribList.push([parser.attribName, parser.attribValue])\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      })\n    }\n\n    parser.attribName = parser.attribValue = ''\n  }\n\n  function openTag (parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag\n\n      // add namespace info to tag\n      var qn = qname(parser.tagName)\n      tag.prefix = qn.prefix\n      tag.local = qn.local\n      tag.uri = tag.ns[qn.prefix] || ''\n\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' +\n          JSON.stringify(parser.tagName))\n        tag.uri = qn.prefix\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          })\n        })\n      }\n\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i]\n        var name = nv[0]\n        var value = nv[1]\n        var qualName = qname(name, true)\n        var prefix = qualName.prefix\n        var local = qualName.local\n        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        }\n\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' +\n            JSON.stringify(prefix))\n          a.uri = prefix\n        }\n        parser.tag.attributes[name] = a\n        emitNode(parser, 'onattribute', a)\n      }\n      parser.attribList.length = 0\n    }\n\n    parser.tag.isSelfClosing = !!selfClosing\n\n    // process the tag\n    parser.sawRoot = true\n    parser.tags.push(parser.tag)\n    emitNode(parser, 'onopentag', parser.tag)\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT\n      } else {\n        parser.state = S.TEXT\n      }\n      parser.tag = null\n      parser.tagName = ''\n    }\n    parser.attribName = parser.attribValue = ''\n    parser.attribList.length = 0\n  }\n\n  function closeTag (parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.')\n      parser.textNode += '</>'\n      parser.state = S.TEXT\n      return\n    }\n\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>'\n        parser.tagName = ''\n        parser.state = S.SCRIPT\n        return\n      }\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    var t = parser.tags.length\n    var tagName = parser.tagName\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]()\n    }\n    var closeTo = tagName\n    while (t--) {\n      var close = parser.tags[t]\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag')\n      } else {\n        break\n      }\n    }\n\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)\n      parser.textNode += '</' + parser.tagName + '>'\n      parser.state = S.TEXT\n      return\n    }\n    parser.tagName = tagName\n    var s = parser.tags.length\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop()\n      parser.tagName = parser.tag.name\n      emitNode(parser, 'onclosetag', parser.tagName)\n\n      var x = {}\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i]\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p]\n          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })\n        })\n      }\n    }\n    if (t === 0) parser.closedRoot = true\n    parser.tagName = parser.attribValue = parser.attribName = ''\n    parser.attribList.length = 0\n    parser.state = S.TEXT\n  }\n\n  function parseEntity (parser) {\n    var entity = parser.entity\n    var entityLC = entity.toLowerCase()\n    var num\n    var numStr = ''\n\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity]\n    }\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC]\n    }\n    entity = entityLC\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2)\n        num = parseInt(entity, 16)\n        numStr = num.toString(16)\n      } else {\n        entity = entity.slice(1)\n        num = parseInt(entity, 10)\n        numStr = num.toString(10)\n      }\n    }\n    entity = entity.replace(/^0+/, '')\n    if (isNaN(num) || numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity')\n      return '&' + parser.entity + ';'\n    }\n\n    return String.fromCodePoint(num)\n  }\n\n  function beginWhiteSpace (parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA\n      parser.startTagPosition = parser.position\n    } else if (!isWhitespace(c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.')\n      parser.textNode = c\n      parser.state = S.TEXT\n    }\n  }\n\n  function charAt (chunk, i) {\n    var result = ''\n    if (i < chunk.length) {\n      result = chunk.charAt(i)\n    }\n    return result\n  }\n\n  function write (chunk) {\n    var parser = this\n    if (this.error) {\n      throw this.error\n    }\n    if (parser.closed) {\n      return error(parser,\n        'Cannot write after close. Assign an onready handler.')\n    }\n    if (chunk === null) {\n      return end(parser)\n    }\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString()\n    }\n    var i = 0\n    var c = ''\n    while (true) {\n      c = charAt(chunk, i++)\n      parser.c = c\n\n      if (!c) {\n        break\n      }\n\n      if (parser.trackPosition) {\n        parser.position++\n        if (c === '\\n') {\n          parser.line++\n          parser.column = 0\n        } else {\n          parser.column++\n        }\n      }\n\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE\n          if (c === '\\uFEFF') {\n            continue\n          }\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1\n            while (c && c !== '<' && c !== '&') {\n              c = charAt(chunk, i++)\n              if (c && parser.trackPosition) {\n                parser.position++\n                if (c === '\\n') {\n                  parser.line++\n                  parser.column = 0\n                } else {\n                  parser.column++\n                }\n              }\n            }\n            parser.textNode += chunk.substring(starti, i - 1)\n          }\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else {\n            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.')\n            }\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY\n            } else {\n              parser.textNode += c\n            }\n          }\n          continue\n\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING\n          } else {\n            parser.script += c\n          }\n          continue\n\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG\n          } else {\n            parser.script += '<' + c\n            parser.state = S.SCRIPT\n          }\n          continue\n\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL\n            parser.sgmlDecl = ''\n          } else if (isWhitespace(c)) {\n            // wait for it...\n          } else if (isMatch(nameStart, c)) {\n            parser.state = S.OPEN_TAG\n            parser.tagName = c\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG\n            parser.tagName = ''\n          } else if (c === '?') {\n            parser.state = S.PROC_INST\n            parser.procInstName = parser.procInstBody = ''\n          } else {\n            strictFail(parser, 'Unencoded <')\n            // if there was some whitespace, then add that in.\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition\n              c = new Array(pad).join(' ') + c\n            }\n            parser.textNode += '<' + c\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.SGML_DECL:\n          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata')\n            parser.state = S.CDATA\n            parser.sgmlDecl = ''\n            parser.cdata = ''\n          } else if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT\n            parser.comment = ''\n            parser.sgmlDecl = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser,\n                'Inappropriately located doctype declaration')\n            }\n            parser.doctype = ''\n            parser.sgmlDecl = ''\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)\n            parser.sgmlDecl = ''\n            parser.state = S.TEXT\n          } else if (isQuote(c)) {\n            parser.state = S.SGML_DECL_QUOTED\n            parser.sgmlDecl += c\n          } else {\n            parser.sgmlDecl += c\n          }\n          continue\n\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL\n            parser.q = ''\n          }\n          parser.sgmlDecl += c\n          continue\n\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT\n            emitNode(parser, 'ondoctype', parser.doctype)\n            parser.doctype = true // just remember that we saw it.\n          } else {\n            parser.doctype += c\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD\n            } else if (isQuote(c)) {\n              parser.state = S.DOCTYPE_QUOTED\n              parser.q = c\n            }\n          }\n          continue\n\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.q = ''\n            parser.state = S.DOCTYPE\n          }\n          continue\n\n        case S.DOCTYPE_DTD:\n          parser.doctype += c\n          if (c === ']') {\n            parser.state = S.DOCTYPE\n          } else if (isQuote(c)) {\n            parser.state = S.DOCTYPE_DTD_QUOTED\n            parser.q = c\n          }\n          continue\n\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD\n            parser.q = ''\n          }\n          continue\n\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING\n          } else {\n            parser.comment += c\n          }\n          continue\n\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED\n            parser.comment = textopts(parser.opt, parser.comment)\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment)\n            }\n            parser.comment = ''\n          } else {\n            parser.comment += '-' + c\n            parser.state = S.COMMENT\n          }\n          continue\n\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment')\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            parser.comment += '--' + c\n            parser.state = S.COMMENT\n          } else {\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING\n          } else {\n            parser.cdata += c\n          }\n          continue\n\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2\n          } else {\n            parser.cdata += ']' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata)\n            }\n            emitNode(parser, 'onclosecdata')\n            parser.cdata = ''\n            parser.state = S.TEXT\n          } else if (c === ']') {\n            parser.cdata += ']'\n          } else {\n            parser.cdata += ']]' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else if (isWhitespace(c)) {\n            parser.state = S.PROC_INST_BODY\n          } else {\n            parser.procInstName += c\n          }\n          continue\n\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && isWhitespace(c)) {\n            continue\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else {\n            parser.procInstBody += c\n          }\n          continue\n\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            })\n            parser.procInstName = parser.procInstBody = ''\n            parser.state = S.TEXT\n          } else {\n            parser.procInstBody += '?' + c\n            parser.state = S.PROC_INST_BODY\n          }\n          continue\n\n        case S.OPEN_TAG:\n          if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else {\n            newTag(parser)\n            if (c === '>') {\n              openTag(parser)\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH\n            } else {\n              if (!isWhitespace(c)) {\n                strictFail(parser, 'Invalid character in tag name')\n              }\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true)\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >')\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (isWhitespace(c)) {\n            continue\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value')\n            parser.attribValue = parser.attribName\n            attrib(parser)\n            openTag(parser)\n          } else if (isWhitespace(c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE\n          } else if (isMatch(nameBody, c)) {\n            parser.attribName += c\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (isWhitespace(c)) {\n            continue\n          } else {\n            strictFail(parser, 'Attribute without value')\n            parser.tag.attributes[parser.attribName] = ''\n            parser.attribValue = ''\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            })\n            parser.attribName = ''\n            if (c === '>') {\n              openTag(parser)\n            } else if (isMatch(nameStart, c)) {\n              parser.attribName = c\n              parser.state = S.ATTRIB_NAME\n            } else {\n              strictFail(parser, 'Invalid attribute name')\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.ATTRIB_VALUE:\n          if (isWhitespace(c)) {\n            continue\n          } else if (isQuote(c)) {\n            parser.q = c\n            parser.state = S.ATTRIB_VALUE_QUOTED\n          } else {\n            strictFail(parser, 'Unquoted attribute value')\n            parser.state = S.ATTRIB_VALUE_UNQUOTED\n            parser.attribValue = c\n          }\n          continue\n\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          parser.q = ''\n          parser.state = S.ATTRIB_VALUE_CLOSED\n          continue\n\n        case S.ATTRIB_VALUE_CLOSED:\n          if (isWhitespace(c)) {\n            parser.state = S.ATTRIB\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes')\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (!isAttribEnd(c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          if (c === '>') {\n            openTag(parser)\n          } else {\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (isWhitespace(c)) {\n              continue\n            } else if (notMatch(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c\n                parser.state = S.SCRIPT\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.')\n              }\n            } else {\n              parser.tagName = c\n            }\n          } else if (c === '>') {\n            closeTag(parser)\n          } else if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName\n            parser.tagName = ''\n            parser.state = S.SCRIPT\n          } else {\n            if (!isWhitespace(c)) {\n              strictFail(parser, 'Invalid tagname in closing tag')\n            }\n            parser.state = S.CLOSE_TAG_SAW_WHITE\n          }\n          continue\n\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (isWhitespace(c)) {\n            continue\n          }\n          if (c === '>') {\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag')\n          }\n          continue\n\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState\n          var buffer\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT\n              buffer = 'textNode'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED\n              buffer = 'attribValue'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED\n              buffer = 'attribValue'\n              break\n          }\n\n          if (c === ';') {\n            parser[buffer] += parseEntity(parser)\n            parser.entity = ''\n            parser.state = returnState\n          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c\n          } else {\n            strictFail(parser, 'Invalid character in entity name')\n            parser[buffer] += '&' + parser.entity + c\n            parser.entity = ''\n            parser.state = returnState\n          }\n\n          continue\n\n        default:\n          throw new Error(parser, 'Unknown state: ' + parser.state)\n      }\n    } // while\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser)\n    }\n    return parser\n  }\n\n  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n  /* istanbul ignore next */\n  if (!String.fromCodePoint) {\n    (function () {\n      var stringFromCharCode = String.fromCharCode\n      var floor = Math.floor\n      var fromCodePoint = function () {\n        var MAX_SIZE = 0x4000\n        var codeUnits = []\n        var highSurrogate\n        var lowSurrogate\n        var index = -1\n        var length = arguments.length\n        if (!length) {\n          return ''\n        }\n        var result = ''\n        while (++index < length) {\n          var codePoint = Number(arguments[index])\n          if (\n            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n            codePoint < 0 || // not a valid Unicode code point\n            codePoint > 0x10FFFF || // not a valid Unicode code point\n            floor(codePoint) !== codePoint // not an integer\n          ) {\n            throw RangeError('Invalid code point: ' + codePoint)\n          }\n          if (codePoint <= 0xFFFF) { // BMP code point\n            codeUnits.push(codePoint)\n          } else { // Astral code point; split in surrogate halves\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            codePoint -= 0x10000\n            highSurrogate = (codePoint >> 10) + 0xD800\n            lowSurrogate = (codePoint % 0x400) + 0xDC00\n            codeUnits.push(highSurrogate, lowSurrogate)\n          }\n          if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n            result += stringFromCharCode.apply(null, codeUnits)\n            codeUnits.length = 0\n          }\n        }\n        return result\n      }\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(String, 'fromCodePoint', {\n          value: fromCodePoint,\n          configurable: true,\n          writable: true\n        })\n      } else {\n        String.fromCodePoint = fromCodePoint\n      }\n    }())\n  }\n})(typeof exports === 'undefined' ? this.sax = {} : exports)\n","export const Attributes = [\r\n    \"xmlns\", \"type\", \"version\", \"href\", \"lang\", \"source\", \"target\"\r\n];\r\n\r\n/**\r\n * Cleans and finds the valid attribute version of the supplied input string\r\n * @param {string} str String to clean, and check\r\n * @returns {string|null} The valid string version, or null if no matches\r\n */\r\nfunction getValidAttribute(str) {\r\n    str = str.toLowerCase();\r\n    for(const attr of Attributes) {\r\n        if(attr.toLowerCase() == str)\r\n            return attr;\r\n    }\r\n    return null;\r\n}\r\n\r\nvar __nodeIds = 0;\r\nexport default class Node {\r\n    _id = 0;\r\n    _tag = '';\r\n    _customAttrs = {};\r\n    _parent = 0;\r\n    _children = [];\r\n    _content = null;\r\n\r\n    constructor(data) {\r\n        __nodeIds++;\r\n        this._id = __nodeIds;\r\n\r\n        if(data) {\r\n            if(typeof data === 'object' && data.name && data.attributes)\r\n                this.applyFromSAX(data);\r\n        }\r\n    }\r\n\r\n    getID() { return this._id; }\r\n    getTag() { return this._tag; }\r\n    getParentID() { return this._parent; }\r\n    getChildrenIDs() { return new Array(this._children); }\r\n    getContent() { return this._content; }\r\n    getCustomAttributes() { return Object.apply({}, this._customAttrs); }\r\n    getAllAttributes() { \r\n        const validAttrs = {};\r\n        for(const prop in this) {\r\n            if(this.hasOwnProperty(prop) && prop.startsWith('_')===false)\r\n                validAttrs[prop] = this[prop];\r\n        }\r\n\r\n        return Object.apply({}, validAttrs, this._customAttrs);\r\n    }\r\n\r\n    /**\r\n     * Applies the details from SAX parsing to this object\r\n     * @param {object} node Object provided from SAX-JS\r\n     */\r\n    applyFromSAX(node) {\r\n        if(node.attributes && typeof node.attributes === 'object') {\r\n            for(const prop in node.attributes) {\r\n                const attr = getValidAttribute(node.attributes[prop].name);\r\n                if(attr && this.hasOwnProperty(attr))\r\n                    this.setAttribute(attr, node.attributes[prop].value);\r\n                else\r\n                    this._customAttrs[node.attributes[prop].name] = node.attributes[prop].value;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets an attribute property by key and value\r\n     * This is a method so sub-classes can override it\r\n     * @param {string} attr Attribute key\r\n     * @param {string} value Attribute value\r\n     */\r\n    setAttribute(attr, value) {\r\n        this[attr] = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the parent of this object\r\n     * Also carries out the child mapping to the parent by second parameter plag\r\n     * @param {Node|number} node New Parent, or parent ID\r\n     * @param {boolean} applyChild If true, set's the children of the parent as well (only if it's a node object)\r\n     */\r\n    setParent(node, applyChild = true) {\r\n        const nodeId = typeof node === 'number' ? node : node._id;\r\n        if(nodeId == 0 || nodeId == this._id) return;\r\n        this._parent = nodeId;\r\n\r\n        if(applyChild && typeof node !== 'number' && node._id)\r\n            node.addChild(this, false);\r\n    }\r\n\r\n    /**\r\n     * Adds a child to this node\r\n     * Also handles setting parrent on the child\r\n     * @param {Node|number} node New child, or child ID\r\n     * @param {boolean} applyParent If true, set's the parent value of new children as well (only if it's a node object)\r\n     */\r\n    addChild(node, applyParent = true) {\r\n        const nodeId = typeof node === 'number' ? node : node._id;\r\n        if(nodeId === 0 || nodeId === this._id) return;\r\n        const exists = this._children.findIndex(i => i === nodeId) !== -1;\r\n        if(!exists) {\r\n            this._children.push(nodeId);\r\n\r\n            if(applyParent && typeof node !== 'number' && node._id)\r\n                node.setParent(this, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a child from this node\r\n     * @param {Node|number} node Child to remove, node or ID of a node\r\n     */\r\n    removeChild(node) {\r\n        const nodeId = typeof node === 'number' ? node : node._id;\r\n        if(nodeId === 0 || nodeId === this._id) return;\r\n\r\n        this._children = this._children.filter(i => i !== nodeId);\r\n    }\r\n\r\n    setContent(val) {\r\n        this._content = val;\r\n    }\r\n}","/*\r\n * RHEMA - Language Translation System\r\n * @author Chris Pikul <ChrisPikul510@gmail.com>\r\n * @license Apache-2.0\r\n */\r\nimport Parser from './parser';\r\n\r\nexport default class Rhema {\r\n    project = null;\r\n    baseLanguage = null;\r\n    languages = new Map();\r\n\r\n    loaded = false;\r\n    isProject = false;\r\n\r\n    parse(data, options = {}) {\r\n        options = Object.assign({}, {\r\n        }, options);\r\n        return new Promise((resolve, reject) => {\r\n            Parser(data)\r\n                .then(obj => {\r\n                    if(!obj) {\r\n                        reject('parse returned null, failed to parse the file');\r\n                        return;\r\n                    }\r\n\r\n                    this.loaded = true;\r\n                    if(obj._tag === 'project') {\r\n                        this.isProject = true;\r\n                        this.project = obj;\r\n                    } else if(obj._tag === 'language') {\r\n                        if(obj.target !== '')\r\n                            this.languages.set(obj.target, obj);\r\n                        else if(this.project !== null) {\r\n                            const baseEl = this.project.getBaseElement();\r\n                            if(baseEl && baseEl.lang == obj.source)\r\n                                this.baseLanguage = obj;\r\n                        }\r\n                    }\r\n\r\n                    resolve();\r\n                })\r\n                .catch(reject);\r\n        })\r\n    }\r\n}","import File from './file';\r\n\r\nexport default class Base extends File {\r\n    _tag = 'base';\r\n}","import Node from '../basenode';\r\n\r\nexport default class Entry extends Node {\r\n    _tag = 'entry';\r\n\r\n    id = '';\r\n\r\n    _source = null;\r\n    _target = null;\r\n\r\n    addChild(node, applyParent = true) {\r\n        super.addChild(node, applyParent);\r\n\r\n        switch(node._tag) {\r\n            case 'source':\r\n                this._source = node;\r\n                break;\r\n            case 'target':\r\n                this._target = node;\r\n                break;\r\n        }\r\n    }\r\n\r\n    getSource() { return this._source; }\r\n    getTarget() { return this._target; }\r\n}","import Node from '../basenode';\r\n\r\nexport default class File extends Node {\r\n    _tag = 'file';\r\n\r\n    href = '';\r\n    lang = '';\r\n}","import Node from '../basenode';\r\n\r\nexport default class Files extends Node {\r\n    _tag = \"files\";\r\n\r\n    _base = null;\r\n    _files = [];\r\n\r\n    addChild(node, applyParent = true) {\r\n        super.addChild(node, applyParent);\r\n\r\n        //Hook into the addChild to find the file types\r\n        if(node._tag === 'file')\r\n            this._files.push(node);\r\n        else if(node._tag === 'base') {\r\n            if(this._base !== null)\r\n                console.warn('Files element only takes 1 Base element, overriding the old with the new');\r\n            this._base = node;\r\n        }\r\n    }\r\n}","export { default as Project } from './project';\r\nexport { default as Files } from './files';\r\nexport { default as File } from './file';\r\nexport { default as Base } from './base';\r\n\r\nexport { default as Language } from './language';\r\nexport { default as Entry } from './entry';\r\nexport { default as Source } from './source';\r\nexport { default as Target } from './target';","import Node from '../basenode'\r\n\r\nexport default class Language extends Node {\r\n    _tag = 'language';\r\n    _nodes = new Map();\r\n\r\n    source = '';\r\n    target = '';\r\n\r\n    addNode(node) {\r\n        //We'll keep a dictionary of all the nodes anyways\r\n        if(node instanceof Node)\r\n            this._nodes.set(node.getID(), node);\r\n    }\r\n}","import Node from '../basenode'\r\n\r\nexport default class Project extends Node {\r\n    _tag = 'project';\r\n    _nodes = new Map();\r\n\r\n    xmlns = 'rhema.100.project';\r\n\r\n    _nodeFiles = null;\r\n\r\n    addNode(node) {\r\n        //We'll keep a dictionary of all the nodes anyways\r\n        if(node instanceof Node)\r\n            this._nodes.set(node.getID(), node);\r\n\r\n        //Find some interesting stuff\r\n        if(node._tag === 'files')\r\n            this._nodeFiles = node;\r\n    }\r\n\r\n    hasFiles() { return this._nodeFiles && this._nodeFiles._base && this._nodeFiles._files.length > 0; }\r\n    countFiles() {\r\n        if(this.hasFiles())\r\n            return this._nodeFiles._files.length + 1; //+1 for base file\r\n        return 0;\r\n    }\r\n    getFiles() {\r\n        if(!this.hasFiles()) return [];\r\n        return [ this._nodeFiles._base ].concat(this._nodeFiles._files);\r\n    }\r\n\r\n    getBaseElement() {\r\n        if(!this.hasFiles()) return null;\r\n        return this._nodeFiles._base;\r\n    }\r\n}","import Node from '../basenode';\r\n\r\nexport default class Source extends Node {\r\n    _tag = 'source';\r\n}","import Node from '../basenode';\r\n\r\nexport default class Target extends Node {\r\n    _tag = 'target';\r\n}","/*\r\n * RHEMA - Language Translation System\r\n * @author Chris Pikul <ChrisPikul510@gmail.com>\r\n * @license Apache-2.0\r\n */\r\nimport SAX from 'sax';\r\n\r\nimport BaseNode from './basenode'\r\nimport * as Nodes from './node'\r\n\r\n/**\r\n * Converts a SAX node object to a Rhema object by matching node name.\r\n * Note: The methodology for instantiating first and then using the applyFromSAX function\r\n * when creating the object is so the function under that actual classes scope get's called!\r\n * Passing the node directly to the constructor evidentally only calls the base class version\r\n * @param {object} node Node object from SAX onOpenTag event\r\n * @returns {BaseNode} Sub-class object of BaseNode\r\n */\r\nexport function NodeFromSAX(node) {\r\n    switch(node.name) {\r\n        case 'project': return (new Nodes.Project()).applyFromSAX(node);\r\n        case 'files': return (new Nodes.Files()).applyFromSAX(node);\r\n        case 'file': return (new Nodes.File()).applyFromSAX(node);\r\n        case 'base': return (new Nodes.Base()).applyFromSAX(node);\r\n\r\n        case 'language': return (new Nodes.Language()).applyFromSAX(node);\r\n        case 'entry': return (new Nodes.Entry()).applyFromSAX(node);\r\n        case 'source': return (new Nodes.Source()).applyFromSAX(node);\r\n        case 'target': return (new Nodes.Target()).applyFromSAX(node);\r\n        \r\n        default:\r\n            //Unknown tag types get absorbed as basic Node types\r\n            const custom = new BaseNode();\r\n            custom._tag = node.name;\r\n            custom.applyFromSAX(node);\r\n            return custom;\r\n    }\r\n}\r\n\r\n/**\r\n * Converts the string reported as the attributes section of a tag into an object of key-values.\r\n * For Processing Instructions, SAX returns the whole string ie. <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n * returns the string 'version=\"1.0\" encoding=\"UTF-8\" '. This function tokenizes that and returns an object\r\n * @param {string} rawStr Raw element attribute string\r\n * @returns {object} Attributes object\r\n */\r\nexport function ParseRawAttribute(rawStr) {\r\n    const attrs = rawStr.split(\" \");\r\n    const rtn = {};\r\n    attrs.map(str => {\r\n            const parts = str.split(\"=\");\r\n            if(parts.length == 2) {\r\n                return [parts[0].trim(), parts[1].substr(1, parts[1].length - 2).trim()];\r\n            }\r\n            return null;\r\n        })\r\n        .filter(p => p !== null)\r\n        .forEach(e => {\r\n            rtn[e[0]] = e[1];\r\n        });\r\n    return rtn;\r\n}\r\n\r\n /**\r\n  * Parses the XML string data and generates a valid document from it\r\n  * @param {string} data Data to parse\r\n  * @returns {Promise} Promise that resolves to a Document object\r\n  */\r\n export default function Parse(data) {\r\n    if(typeof data !== 'string')\r\n        return Promise.reject(\"Parse must be supplied with a string of data\");\r\n    return new Promise((resolve, reject) => {\r\n        const p = SAX.parser(false, {\r\n            trim: true,\r\n            normalize: false,\r\n            lowercase: true,\r\n            xmlns: true,\r\n            position: true\r\n        });\r\n        p.onerror = reject;\r\n\r\n        p.onprocessinginstruction = ({ name, body }) => {\r\n            const attrs = ParseRawAttribute(body);\r\n            console.log('[PI]', name, attrs);\r\n        }\r\n\r\n        let rootDoc = null;\r\n        let lastTag = null, thisTag = null;\r\n        let treeDepth = [];\r\n\r\n        p.onopentag = node => {\r\n            //Figure out which tag it is\r\n            thisTag = NodeFromSAX(node);\r\n\r\n            //Apply tree-mapping\r\n            if(thisTag) {\r\n                if(!rootDoc && (thisTag instanceof Nodes.Project || thisTag instanceof Nodes.Language))\r\n                    rootDoc = thisTag;\r\n\r\n                if(lastTag) {\r\n                    thisTag.setParent(lastTag);\r\n                    treeDepth.push(lastTag);\r\n                }\r\n\r\n                lastTag = thisTag;\r\n\r\n                if(rootDoc && thisTag._id !== rootDoc._id) rootDoc.addNode(thisTag);\r\n            } else {\r\n                reject(`failed to parse element: ${node.name}`);\r\n            }\r\n        };\r\n\r\n        p.onclosetag = tag => {\r\n            if(treeDepth.length > 0) lastTag = treeDepth.pop();\r\n        };\r\n\r\n        p.ontext = txt => {\r\n            if(lastTag !== null)\r\n                lastTag.setContent(txt);\r\n        };\r\n\r\n        \r\n        p.onend = () => resolve(rootDoc);\r\n\r\n        p.write(data).close();\r\n    })\r\n }\r\n","module.exports = require(\"stream\");","module.exports = require(\"string_decoder\");"],"sourceRoot":""}